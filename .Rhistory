)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 45)
grid::gList(s,t,c, te)
}
)
ggplot2
ggplot2 %>% library()
library(ggplot2)
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 45)
grid::gList(s,t,c, te)
}
)
library(dplyr)
ggplot(plot_dat, aes(x = DATE))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
grid::textGrob()
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20)
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20)
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20))
grid::grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20))
library(grid)
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20))
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=5))
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 15)
grid::gList(s,t,c, te)
}
)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
plot_dat <- noaa %>% filter(DATE< ymd("2009-1-1") & DATE > ymd("2005-1-1")) %>% filter(COUNTRY %in% c("CHINA", "JAPAN", "USA"))
library(lubridate)
plot_dat <- noaa %>% filter(DATE< ymd("2009-1-1") & DATE > ymd("2005-1-1")) %>% filter(COUNTRY %in% c("CHINA", "JAPAN", "USA"))
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("bottom"), rot = 15)
grid::gList(s,t,c, te)
}
)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
0.001*0.99/(0.001*0.99+0.999*0.01)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
library(dplyr)
library(lubridate)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
library(ggplot2)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))+theme_bw()
install.packages("ggmap")
install.packages("leaflet")
map_dat <- plot_dat %>% filter(COUNTRY == "CHINA")
map_dat
library(leaflet)
install.packages("xtable")
library(leaflet)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~0.3*EQ_MAG_MS)
lng = ~ LONGITUDE, lat = ~ LATITUDE,
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~0.3*EQ_MAG_MS
lng = ~ LONGITUDE, lat = ~ LATITUDE,
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~0.3*EQ_MAG_MS
lng = ~ LONGITUDE, lat = ~ LATITUDE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS
lng = ~ LONGITUDE, lat = ~ LATITUDE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ DATE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ paste("<b>date:</b> ",DATE))
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ paste("<b>date:</b><br> ",DATE))
eq_create_label <- function(dat){
loc <- dat$LOCATION_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>"
"<b>Magnitude: </b>", mag,"<br>"
"<b>Total deaths: </b>", dea)
}
eq_create_label <- function(dat){
loc <- dat$LOCATION_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>"
"<b>Magnitude: </b>", mag,"<br>"
"<b>Total deaths: </b>", dea)
}
eq_create_label <- function(dat){
loc <- dat$LOCATION_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>",
"<b>Magnitude: </b>", mag,"<br>",
"<b>Total deaths: </b>", dea)
}
map_dat %>% mutate(pop_text = eq_create_label(.)) %>% select(pop_text)
View(map_dat)
eq_create_label <- function(dat){
loc <- dat$LOCATION_NAME_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>",
"<b>Magnitude: </b>", mag,"<br>",
"<b>Total deaths: </b>", dea)
}
map_dat %>% mutate(pop_text = eq_create_label(.)) %>% select(pop_text)
labeled_map_dat <- map_dat %>% mutate(pop_text = eq_create_label(.)) %>% select(pop_text)
labeled_map_dat <- map_dat %>% mutate(pop_text = eq_create_label(.))
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ pop_text,DATE))
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ pop_text,DATE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ pop_text)
eq_map <- function(map_dat, annot_col){
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = quo(pop_text))
#date popup plot
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = !!annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
#date popup plot
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = quo(!!annot_col))
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = quo(pop_text))
quo(pop_text)
labeled_map_dat %>% eq_map(pop_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
labeled_map_dat %>% eq_map(pop_text)
labeled_map_dat %>% eq_map(DATE)
devtools::use_testthat()
class(GeomTimeline)
class(GeomTimeline())
geom_timeline()
library(ggplot2)
geom_timeline()
class(geom_timeline() )
eq_create_label(map_dat)
class(eq_create_label(map_dat))
labeled_map_dat %>% eq_map(DATE)
library(leaflet)
library(dplyr)
labeled_map_dat %>% eq_map(DATE)
labeled_map_dat %>% eq_map(DATE) %>% class()
devtools::use_data(mat_dat, internal = T)
devtools::use_data(map_dat, internal = T)
devtools::use_data(labeled_map_dat, internal = T)
View(map_dat)
map_dat %>% eq_map(DATE)
devtools::use_data(map_dat, internal = T)
devtools::build_vignettes()
quo(YEAR <= -1000 | YEAR >= 1000 ~ lubridate::ymd(!!quo(DATE_), truncated = 2, quiet = TRUE))
library(dplyr)
quo(YEAR <= -1000 | YEAR >= 1000 ~ lubridate::ymd(!!quo(DATE_), truncated = 2, quiet = TRUE))
quo(-COUNTRY_, -loc)
quo(-COUNTRY_)
eq_clean_data <- function(data){
#Combine year, month, and day into date
dat <- data %>% tidyr::unite(DATE_, YEAR, MONTH, DAY, sep = "-", remove = F) %>%
dplyr::mutate(DATE = dplyr::case_when(
!!quo(YEAR <= -1000 | YEAR >= 1000 ~ lubridate::ymd(!!quo(DATE_), truncated = 2, quiet = TRUE)),
!!quo(YEAR > -1000 & YEAR < 0 ~ as.Date(ISOdate(year = !!quo(-YEAR), month = dplyr::if_else(is.na(!!quo(MONTH)), 1, as.numeric(!!quo(MONTH))), day = dplyr::if_else(is.na(!!quo(DAY)), 1,as.numeric(!!quo(DAY)))))),
!!quo(YEAR < 1000 & YEAR > 0 ~ as.Date(ISOdate(year = !!quo(YEAR), month = dplyr::if_else(is.na(!!quo(MONTH)), 1, as.numeric(!!quo(MONTH))), day = dplyr::if_else(is.na(!!quo(DAY)), 1,as.numeric(!!quo(DAY)))))))) %>%
dplyr::mutate(DATE = dplyr::if_else(!!quo(YEAR<0), !!quo(DATE - 2*difftime(!!quo(DATE), lubridate::ymd("0000-1-1"))), !!quo(DATE))) %>%
dplyr::select(quo(-DATE_))
# convert lat and lon to numeric
dat <- dat %>% dplyr::mutate(LATITUDE = as.numeric(!!quo(LATITUDE))) %>%
dplyr::mutate(LONGITUDE = as.numeric(!!quo(LONGITUDE)))
# strip and convert location_name
dat <- dat %>% tidyr::separate(!!quo(LOCATION_NAME), c("COUNTRY_", "loc"), sep = ":", extra = "drop", fill = "left", remove = FALSE) %>%
dplyr::mutate(LOCATION_NAME_ = stringr::str_to_title(!!quo(loc))) %>% dplyr::select(!!quo(-COUNTRY_), !!quo(-loc))
dat
}
noa <- eq_clean_data(noaa)
eq_clean_data <- function(data){
#Combine year, month, and day into date
dat <- data %>% tidyr::unite(DATE_, YEAR, MONTH, DAY, sep = "-", remove = F) %>%
dplyr::mutate(DATE = dplyr::case_when(
!!quo(YEAR <= -1000 | YEAR >= 1000 ~ lubridate::ymd(!!quo(DATE_), truncated = 2, quiet = TRUE)),
!!quo(YEAR > -1000 & YEAR < 0 ~ as.Date(ISOdate(year = !!quo(-YEAR), month = dplyr::if_else(is.na(!!quo(MONTH)), 1, as.numeric(!!quo(MONTH))), day = dplyr::if_else(is.na(!!quo(DAY)), 1,as.numeric(!!quo(DAY)))))),
!!quo(YEAR < 1000 & YEAR > 0 ~ as.Date(ISOdate(year = !!quo(YEAR), month = dplyr::if_else(is.na(!!quo(MONTH)), 1, as.numeric(!!quo(MONTH))), day = dplyr::if_else(is.na(!!quo(DAY)), 1,as.numeric(!!quo(DAY)))))))) %>%
dplyr::mutate(DATE = dplyr::if_else(!!quo(YEAR<0), !!quo(DATE - 2*difftime(!!quo(DATE), lubridate::ymd("0000-1-1"))), !!quo(DATE))) %>%
dplyr::select(!!quo(-DATE_))
# convert lat and lon to numeric
dat <- dat %>% dplyr::mutate(LATITUDE = as.numeric(!!quo(LATITUDE))) %>%
dplyr::mutate(LONGITUDE = as.numeric(!!quo(LONGITUDE)))
# strip and convert location_name
dat <- dat %>% tidyr::separate(!!quo(LOCATION_NAME), c("COUNTRY_", "loc"), sep = ":", extra = "drop", fill = "left", remove = FALSE) %>%
dplyr::mutate(LOCATION_NAME_ = stringr::str_to_title(!!quo(loc))) %>% dplyr::select(!!quo(-COUNTRY_), !!quo(-loc))
dat
}
noa <- eq_clean_data(noaa)
View(noa)
!!
?!!
devtools::document()
View(noa)
noaa %>% dplyr::mutate(!!quo(new = 2*DAY))
quo(new = 2*DAY)
noaa %>% dplyr::mutate(!!quo(new) = !!quo(2*DAY))
noaa %>% dplyr::mutate(!!quo(new))
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
?ggplot2::GeomLinerange
load("C:/Users/esppk/OneDrive/NOAA_Toolkits/noaatk/.RData")
devtools::document()
devtools::document()
devtools::document()
library(tidyverse)
data("mtcars")
mtcars %>% as.tibble()
mtcars %>% filter(wt > 2)
mtcars %>% as.tibble() %>% filter(wt > 2)
mtcars %>% as.tibble() %>% filter(wt > 2) %>% mutate(new = hp*2)
mtcars %>% as.tibble() %>% filter(wt > 2) %>% mutate(!!quo(new = hp*2))
mtcars %>% as.tibble() %>% filter(wt > 2) %>% mutate(!!quo(new = !!quo(hp*2)))
mtcars %>% as.tibble() %>% filter(wt > 2) %>% mutate(!!quo(new = quo(hp*2)))
mtcars %>% as.tibble() %>% filter(wt > 2) %>% mutate(new = !!quo(hp*2))
mtcars %>% as.tibble() %>% filter(wt > 2) %>% mutate(quo(new = !!quo(hp*2)))
mtcars %>% as.tibble() %>% filter(wt > 2) %>% mutate(new = !!quo(hp*2))
devtools::document()
devtools::document()
library(rlang)
mtcars %>% filter(.data$mpg > 2)
eq_clean_data <- function(data){
#Combine year, month, and day into date
dat <- data %>% tidyr::unite(.data$DATE_, !!quo(YEAR), !!quo(MONTH), !!quo(DAY), sep = "-", remove = F) %>%
dplyr::mutate(DATE = dplyr::case_when(
!!quo(YEAR <= -1000 | YEAR >= 1000 ~ lubridate::ymd(.data$DATE_, truncated = 2, quiet = TRUE)),
!!quo(YEAR > -1000 & YEAR < 0 ~ as.Date(ISOdate(year = !!quo(-YEAR), month = dplyr::if_else(is.na(!!quo(MONTH)), 1, as.numeric(!!quo(MONTH))), day = dplyr::if_else(is.na(!!quo(DAY)), 1,as.numeric(!!quo(DAY)))))),
!!quo(YEAR < 1000 & YEAR > 0 ~ as.Date(ISOdate(year = !!quo(YEAR), month = dplyr::if_else(is.na(!!quo(MONTH)), 1, as.numeric(!!quo(MONTH))), day = dplyr::if_else(is.na(!!quo(DAY)), 1,as.numeric(!!quo(DAY)))))))) %>%
dplyr::mutate(DATE = dplyr::if_else(!!quo(YEAR<0), !!quo(DATE - 2*difftime(!!quo(DATE), lubridate::ymd("0000-1-1"))), !!quo(DATE))) %>%
dplyr::select(-.data$DATE_)
# convert lat and lon to numeric
dat <- dat %>% dplyr::mutate(LATITUDE = as.numeric(!!quo(LATITUDE))) %>%
dplyr::mutate(LONGITUDE = as.numeric(!!quo(LONGITUDE)))
# strip and convert location_name
dat <- dat %>% tidyr::separate(!!quo(LOCATION_NAME), c("COUNTRY_", "loc"), sep = ":", extra = "drop", fill = "left", remove = FALSE) %>%
dplyr::mutate(LOCATION_NAME_ = stringr::str_to_title(!!quo(loc))) %>% dplyr::select(!!quo(-COUNTRY_), !!quo(-loc))
dat
}
noaa_raw <- readr::read_delim("signif.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
noaa <- eq_clean_data(noaa_raw)
data <- noaa_raw
data %>% tidyr::unite(.data$DATE_, !!quo(YEAR), !!quo(MONTH), !!quo(DAY), sep = "-", remove = F)
data %>% tidyr::unite("DATE_", !!quo(YEAR), !!quo(MONTH), !!quo(DAY), sep = "-", remove = F)
data %>% tidyr::unite("DATE_", .data$YEAR, .data$MONTH, .data$DAY, sep = "-", remove = F)
data %>% tidyr::unite("DATE_", .data$YEAR, .data$MONTH, .data$DAY, sep = "-", remove = F) %>%
dplyr::mutate(DATE = dplyr::case_when(
.data$YEAR <= -1000 | .data$YEAR >= 1000 ~ lubridate::ymd(.data$DATE_, truncated = 2, quiet = TRUE),
.data$YEAR > -1000 & .data$YEAR < 0 ~ as.Date(ISOdate(year = -.data$YEAR,
month = dplyr::if_else(is.na(.data$MONTH), 1, as.numeric(.data$MONTH)),
day = dplyr::if_else(is.na(.data$DAY), 1,as.numeric(.data$DAY)))),
.data$YEAR < 1000 & .data$YEAR > 0 ~ as.Date(ISOdate(year = .data$YEAR,
month = dplyr::if_else(is.na(.data$MONTH), 1, as.numeric(.data$MONTH) ),
day = dplyr::if_else(is.na(.data$DAY), 1,as.numeric(.data$DAY) ) )) ) ) %>%
dplyr::mutate(DATE = dplyr::if_else(.data$YEAR<0, .data$DATE - 2*difftime(.data$DATE), lubridate::ymd("0000-1-1"), .data$DATE)) %>%
dplyr::select(-.data$DATE_)
data %>% tidyr::unite("DATE_", .data$YEAR, .data$MONTH, .data$DAY, sep = "-", remove = F) %>%
dplyr::mutate(DATE = dplyr::case_when(
.data$YEAR <= -1000 | .data$YEAR >= 1000 ~ lubridate::ymd(.data$DATE_, truncated = 2, quiet = TRUE),
.data$YEAR > -1000 & .data$YEAR < 0 ~ as.Date(ISOdate(year = -.data$YEAR,
month = dplyr::if_else(is.na(.data$MONTH), 1, as.numeric(.data$MONTH)),
day = dplyr::if_else(is.na(.data$DAY), 1,as.numeric(.data$DAY)))),
.data$YEAR < 1000 & .data$YEAR > 0 ~ as.Date(ISOdate(year = .data$YEAR,
month = dplyr::if_else(is.na(.data$MONTH), 1, as.numeric(.data$MONTH) ),
day = dplyr::if_else(is.na(.data$DAY), 1,as.numeric(.data$DAY) ) )) ) ) %>%
dplyr::mutate(DATE = dplyr::if_else(.data$YEAR<0, .data$DATE - 2*difftime(.data$DATE, lubridate::ymd("0000-1-1")), .data$DATE)) %>%
dplyr::select(-.data$DATE_)
devtools::document()
devtools::use_package(rlang)
devtools::use_package('rlang')
rm(data)
